#include <OneWire.h>

class CProbe
{
    OneWire  ds[8];

  public:
    int nums;
    double t[8];


    void Probe::setup( int in0, int in1, int in2, int in3, int in4, int in5, int in6, int in7, int in8)
    {
      ds[0].setup( in1 );
      if (in1) ds[1].setup( in1 );
      if (in2) ds[2].setup( in2 );
      if (in3) ds[3].setup( in3 );
      if (in4) ds[4].setup( in4 );
      if (in5) ds[5].setup( in5 );
      if (in6) ds[6].setup( in6 );
      if (in7) ds[7].setup( in7 );
      nums = 1 + (in1!=0) + (in2!=0) + (in3!=0)+ (in4!=0) + (in5!=0) + (in6!=0) + (in7!=0);
      for (int i = 0; i < 8; i++)
      {
        t[i] = 0;
      }
    };

    void Probe::readvalues()
    {
      for (int i = 0; i < nums; i++)
      {
        t[i] = getTemp( i );
      }
    }

    float Probe::_getTemp(int i) {
      //returns the temperature from one DS18S20 in DEG Celsius

      byte data[12];
      byte addr[8];

      if ( !ds[i].search(addr)) {
        //no more sensors on chain, reset search
        ds[i].reset_search();
        return -1000;
      }

      if ( OneWire::crc8( addr, 7) != addr[7]) {
        Serial.println("CRC is not valid!");
        return -1001;
      }

      if ( addr[0] != 0x10 && addr[0] != 0x28) {
        Serial.print("Device is not recognized");
        return -1002;
      }

      ds[i].reset();
      ds[i].select(addr);
      ds[i].write(0x44, 1); // start conversion, with parasite power on at the end

      byte present = ds[i].reset();
      ds[i].select(addr);
      ds[i].write(0xBE); // Read Scratchpad


      for (int i = 0; i < 9; i++) { // we need 9 bytes
        data[i] = ds[i].read();
      }

      ds[i].reset_search();

      byte MSB = data[1];
      byte LSB = data[0];

      float tempRead = ((MSB << 8) | LSB); //using two's compliment
      float TemperatureSum = tempRead / 16;

      return TemperatureSum;
    }
};
